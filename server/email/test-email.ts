/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * 
 * –ó–∞–ø—É—Å–∫: npx tsx server/email/test-email.ts
 */

import 'dotenv/config'; // –ó–∞–≥—Ä—É–∂–∞–µ–º .env
import { EmailService } from './services/EmailService';
import { EmailConfig } from './types/email.types';

async function testEmailConnection() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...\n');

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
  const config: EmailConfig = {
    user: process.env.EMAIL_USER || 'your-email@gmail.com',
    password: process.env.EMAIL_PASSWORD || 'your-app-password',
    host: process.env.EMAIL_HOST || 'imap.gmail.com',
    port: parseInt(process.env.EMAIL_PORT || '993'),
    tls: true,
    tlsOptions: {
      rejectUnauthorized: false,
    },
  };

  console.log('üìß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
  console.log(`   Email: ${config.user}`);
  console.log(`   Host: ${config.host}:${config.port}`);
  console.log(`   TLS: ${config.tls}\n`);

  const emailService = new EmailService(config);

  try {
    // –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üì° –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    const isConnected = await emailService.testConnection();
    
    if (!isConnected) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É');
      process.exit(1);
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n');

    // –¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∏—Å–µ–º
    console.log('üì® –¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 –ø–∏—Å–µ–º...');
    const allEmails = await emailService.fetchAllEmails(3);
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–∏—Å–µ–º: ${allEmails.length}\n`);
    
    allEmails.forEach((email, index) => {
      console.log(`üìß –ü–∏—Å—å–º–æ ${index + 1}:`);
      console.log(`   From: ${email.from}`);
      console.log(`   Subject: ${email.subject}`);
      console.log(`   Date: ${email.date}`);
      console.log(`   Message-ID: ${email.messageId}`);
      console.log(`   Text preview: ${email.text.substring(0, 100)}...`);
      console.log('');
    });

    // –¢–µ—Å—Ç 3: –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
    console.log('üì¨ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º...');
    const unreadEmails = await emailService.fetchUnreadEmails(5);
    console.log(`‚úÖ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º: ${unreadEmails.length}\n`);

    if (unreadEmails.length > 0) {
      console.log('–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞:');
      unreadEmails.forEach((email, index) => {
        console.log(`${index + 1}. ${email.subject} (–æ—Ç: ${email.from})`);
      });
    }

    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    emailService.disconnect();
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testEmailConnection();

