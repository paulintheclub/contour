/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ –ë–î
 * 
 * –ó–∞–ø—É—Å–∫: npx tsx server/email/test-organization-email.ts <organization-id>
 */

import 'dotenv/config';
import { EmailService } from './services/EmailService';
import { getOrganizationEmailConfig } from './utils/getOrganizationEmailConfig';
import { prisma } from '@/lib/prisma';

async function testOrganizationEmail() {
  const organizationId = process.argv[2];

  if (!organizationId) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:\n');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx server/email/test-organization-email.ts <organization-id>\n');
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const orgs = await prisma.organization.findMany({
      where: { emailEnabled: true },
      select: { id: true, name: true, emailUser: true },
    });

    if (orgs.length > 0) {
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º email:');
      orgs.forEach((org) => {
        console.log(`   ‚Ä¢ ${org.name} (${org.id})`);
        console.log(`     Email: ${org.emailUser}`);
      });
    } else {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º email.');
      console.log('   –°–æ–∑–¥–∞–π—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Super Admin –ø–∞–Ω–µ–ª—å.');
    }
    
    process.exit(1);
  }

  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏...\n');

  try {
    // –ü–æ–ª—É—á–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    const org = await prisma.organization.findUnique({
      where: { id: organizationId },
      select: { id: true, name: true, emailEnabled: true, emailUser: true },
    });

    if (!org) {
      console.error('‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      process.exit(1);
    }

    console.log('üìå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:', org.name);
    console.log('üìß Email:', org.emailUser);
    console.log('üîå Email –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:', org.emailEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞');
    console.log('');

    if (!org.emailEnabled) {
      console.error('‚ùå Email –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
      console.log('‚ÑπÔ∏è  –í–∫–ª—é—á–∏—Ç–µ email –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ Super Admin –ø–∞–Ω–µ–ª–∏\n');
      process.exit(1);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('üîê –ü–æ–ª—É—á–µ–Ω–∏–µ email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î...');
    const config = await getOrganizationEmailConfig(organizationId);

    if (!config) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
      console.log('‚ÑπÔ∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email –≤ Super Admin –ø–∞–Ω–µ–ª–∏\n');
      process.exit(1);
    }

    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞');
    console.log(`   Host: ${config.host}:${config.port}`);
    console.log(`   TLS: ${config.tls}\n`);

    // –°–æ–∑–¥–∞—Ç—å Email Service
    const emailService = new EmailService(config);

    // –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üì° –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    const isConnected = await emailService.testConnection();

    if (!isConnected) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É');
      console.log('‚ÑπÔ∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ App Password –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n');
      process.exit(1);
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n');

    // –¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∏—Å–µ–º
    console.log('üì® –¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –ø–∏—Å–µ–º...');
    await emailService.connect();
    const allEmails = await emailService.fetchAllEmails(5);
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–∏—Å–µ–º: ${allEmails.length}\n`);
    
    if (allEmails.length > 0) {
      allEmails.forEach((email, index) => {
        console.log(`üìß –ü–∏—Å—å–º–æ ${index + 1}:`);
        console.log(`   From: ${email.from}`);
        console.log(`   Subject: ${email.subject}`);
        console.log(`   Date: ${email.date}`);
        console.log(`   Message-ID: ${email.messageId}`);
        if (email.text) {
          console.log(`   Preview: ${email.text.substring(0, 80)}...`);
        }
        console.log('');
      });
    }

    // –¢–µ—Å—Ç 3: –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
    console.log('üì¨ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º...');
    const unreadEmails = await emailService.fetchUnreadEmails(10);
    console.log(`‚úÖ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º: ${unreadEmails.length}\n`);

    if (unreadEmails.length > 0) {
      console.log('üìã –°–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º:');
      unreadEmails.forEach((email, index) => {
        console.log(`   ${index + 1}. ${email.subject}`);
        console.log(`      –û—Ç: ${email.from}`);
        console.log(`      –î–∞—Ç–∞: ${email.date}`);
      });
      console.log('');
    }

    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüéâ Email –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:', org.name);
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    emailService.disconnect();
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testOrganizationEmail();

