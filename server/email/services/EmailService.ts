import Imap from 'imap';
import { simpleParser, ParsedMail } from 'mailparser';
import { EmailConfig, ParsedEmail } from '../types/email.types';

export class EmailService {
  private imap: Imap;
  private isConnected: boolean = false;

  constructor(config: EmailConfig) {
    this.imap = new Imap({
      user: config.user,
      password: config.password,
      host: config.host,
      port: config.port,
      tls: config.tls,
      tlsOptions: config.tlsOptions || { rejectUnauthorized: false },
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
    this.imap.once('ready', () => {
      console.log('‚úÖ IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      this.isConnected = true;
    });

    this.imap.once('error', (err: Error) => {
      console.error('‚ùå IMAP –æ—à–∏–±–∫–∞:', err.message);
      this.isConnected = false;
    });

    this.imap.once('end', () => {
      console.log('üîå IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
      this.isConnected = false;
    });
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É
   */
  async connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      if (this.isConnected) {
        resolve();
        return;
      }

      this.imap.once('ready', () => resolve());
      this.imap.once('error', (err: Error) => reject(err));
      this.imap.connect();
    });
  }

  /**
   * –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç IMAP —Å–µ—Ä–≤–µ—Ä–∞
   */
  disconnect(): void {
    if (this.isConnected) {
      this.imap.end();
    }
  }

  /**
   * –û—Ç–∫—Ä—ã—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é INBOX)
   */
  private async openMailbox(boxName: string = 'INBOX'): Promise<void> {
    return new Promise((resolve, reject) => {
      this.imap.openBox(boxName, false, (err, box) => {
        if (err) {
          reject(err);
        } else {
          console.log(`üì¨ –û—Ç–∫—Ä—ã—Ç —è—â–∏–∫: ${boxName} (${box.messages.total} –ø–∏—Å–µ–º)`);
          resolve();
        }
      });
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
   */
  async fetchUnreadEmails(limit: number = 10): Promise<ParsedEmail[]> {
    try {
      await this.connect();
      await this.openMailbox();

      return new Promise((resolve, reject) => {
        const emails: ParsedEmail[] = [];

        // –ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
        this.imap.search(['UNSEEN'], (err, results) => {
          if (err) {
            reject(err);
            return;
          }

          if (!results || results.length === 0) {
            console.log('üì≠ –ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º');
            resolve([]);
            return;
          }

          console.log(`üì® –ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º: ${results.length}`);

          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
          const limitedResults = results.slice(0, limit);

          const fetch = this.imap.fetch(limitedResults, {
            bodies: '',
            struct: true,
          });

          fetch.on('message', (msg, seqno) => {
            msg.on('body', (stream) => {
              simpleParser(stream, async (err, parsed) => {
                if (err) {
                  console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å—å–º–∞:', err);
                  return;
                }

                const email = this.convertToParseEmail(parsed);
                emails.push(email);
              });
            });
          });

          fetch.once('error', (err) => {
            reject(err);
          });

          fetch.once('end', () => {
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å–µ–º: ${emails.length}`);
            resolve(emails);
          });
        });
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–º–µ—Ç–∏—Ç—å –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
   */
  async markAsRead(messageId: string): Promise<void> {
    try {
      await this.openMailbox();

      return new Promise((resolve, reject) => {
        // –ü–æ–∏—Å–∫ –ø–æ Message-ID
        this.imap.search([['HEADER', 'MESSAGE-ID', messageId]], (err, results) => {
          if (err) {
            reject(err);
            return;
          }

          if (!results || results.length === 0) {
            console.log(`‚ö†Ô∏è –ü–∏—Å—å–º–æ —Å ID ${messageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            resolve();
            return;
          }

          // –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
          this.imap.addFlags(results, ['\\Seen'], (flagErr) => {
            if (flagErr) {
              reject(flagErr);
            } else {
              console.log(`‚úÖ –ü–∏—Å—å–º–æ ${messageId} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ`);
              resolve();
            }
          });
        });
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –ø–∏—Å—å–º–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∏—Å—å–º–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async fetchAllEmails(limit: number = 5): Promise<ParsedEmail[]> {
    try {
      await this.connect();
      await this.openMailbox();

      return new Promise((resolve, reject) => {
        const emails: ParsedEmail[] = [];

        // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø–∏—Å–µ–º
        this.imap.search(['ALL'], (err, results) => {
          if (err) {
            reject(err);
            return;
          }

          if (!results || results.length === 0) {
            console.log('üì≠ –ù–µ—Ç –ø–∏—Å–µ–º');
            resolve([]);
            return;
          }

          console.log(`üì® –í—Å–µ–≥–æ –ø–∏—Å–µ–º: ${results.length}`);

          // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø–∏—Å–µ–º
          const limitedResults = results.slice(-limit);

          const fetch = this.imap.fetch(limitedResults, {
            bodies: '',
            struct: true,
          });

          fetch.on('message', (msg) => {
            msg.on('body', (stream) => {
              simpleParser(stream, async (err, parsed) => {
                if (err) {
                  console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å—å–º–∞:', err);
                  return;
                }

                const email = this.convertToParseEmail(parsed);
                emails.push(email);
              });
            });
          });

          fetch.once('error', (err) => {
            reject(err);
          });

          fetch.once('end', () => {
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å–µ–º: ${emails.length}`);
            resolve(emails);
          });
        });
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º:', error);
      throw error;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ParsedMail –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
   */
  private convertToParseEmail(parsed: ParsedMail): ParsedEmail {
    return {
      messageId: parsed.messageId || '',
      from: parsed.from?.text || '',
      to: parsed.to?.text,
      subject: parsed.subject || '',
      text: parsed.text || '',
      html: parsed.html || '',
      date: parsed.date || new Date(),
      headers: parsed.headers,
    };
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async testConnection(): Promise<boolean> {
    try {
      await this.connect();
      await this.openMailbox();
      this.disconnect();
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      return false;
    }
  }
}

